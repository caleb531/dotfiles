# Your snippets

# C, C++, JavaScript, and Awk

'.source.c,
 .source.cpp,
 .source.js,
 .source.awk':

  # Conditional blocks

  'if':
    'prefix': 'if'
    'body': 'if (${1:condition}) {\n\t$2\n} $3'

  'else if':
    'prefix': 'elseif'
    'body': 'else if (${1:condition}) {\n\t$2\n} $3'

  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'

  'while':
    'prefix': 'while'
    'body': 'while (${1:condition}) {\n\t$2\n}'

  # Switch constructs

  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:variable}) {\n\t$2\n}'

  'case':
    'prefix': 'case'
    'body': 'case ${1:value}:\n\t$2'

# C++ and JavaScript


'.source.cpp,
 .source.js':

  # Error handling

  'try':
    'prefix': 'try'
    'body': 'try {\n\t$1\n} $2'

  'catch':
    'prefix': 'catch'
    'body': 'catch ($1) {\n\t$2\n} $3'

  'finally':
    'prefix': 'finally'
    'body': 'finally {\n\t$1\n}'

# C and C++

'.source.c,
 .source.cpp':

  'include guard':
    'prefix': 'once'
    'body': '#pragma once\n'

  'include':
    'prefix': 'inc'
    'body': '#include $1'

  'for':
    'prefix': 'for'
    'body': 'for (int ${1:i} = ${2:0}; ${1:i} < ${3:end}; ${1:i}${4:++}) {\n\t$5\n}'

  'function':
    'prefix': 'f'
    'body': '${1:void} ${2:fname}($3) {\n\t$4\n}'

  'struct':
    'prefix': 'struct'
    'body': 'struct ${1:Struct} {\n\t$2\n};'

# C

'.source.c':

  'include stdio':
    'prefix': 'incstdio'
    'body': '#include <stdio.h>\n'

  'printf':
    'prefix': 'printf'
    'body': 'printf($1);'

  'for':
    'prefix': 'for'
    'body': 'for (${1:i} = ${2:0}; ${1:i} < ${3:end}; ${1:i}${4:++}) {\n\t$5\n}'

# C++

'.source.cpp':

  'include iostream':
    'prefix': 'inciostream'
    'body': '#include <iostream>\n'

  'using namespace std':
    'prefix': 'using'
    'body': 'using namespace std;\n'

  'constructor definition':
    'prefix': 'ctor'
    'body': '${1:Class}::${1:Class}($2) {\n\t$3\n}'

  'destructor definition':
    'prefix': 'dtor'
    'body': '${1:Class}::~${1:Class}() {\n\t$3\n}'

  'class':
    'prefix': 'class'
    'body': 'class ${1:Class} {\n\t$2\n};'

  'public blocks':
    'prefix': 'public'
    'body': 'public:\n\t$1'

  'private blocks':
    'prefix': 'private'
    'body': 'private:\n\t$1'

  'protected blocks':
    'prefix': 'protected'
    'body': 'protected:\n\t$1'

  'function method':
    'prefix': 'fm'
    'body': '${1:void} ${2:Class}::${3:fname}($4) {\n\t$5\n}'

  'this pointer access':
    'prefix': 'this'
    'body': 'this->'

  'cin':
    'prefix': 'cin'
    'body': 'cin >> $1;'

  'cout':
    'prefix': 'cout'
    'body': 'cout << $1;'

  'cout endl':
    'prefix': 'coutendl'
    'body': 'cout << $1 << endl;'

  'cerr':
    'prefix': 'cerr'
    'body': 'cerr << $1;'

  'cerr endl':
    'prefix': 'cerrendl'
    'body': 'cerr << $1 << endl;'

# JavaScript

'.source.js':

  # Control structures

  'for':
    'prefix': 'for'
    'body': 'for (var ${1:i} = ${2:0}; ${1:i} < ${3:end}; ${1:i} += ${4:1}) {\n\t$5\n}'

  'for..in':
    'prefix': 'forin'
    'body': 'for (var ${1:key} in ${2:object}) {\n\tif (${2:object}.hasOwnProperty(${1:key})) {\n\t\t$3\n\t}\n}'

  # Functions

  'function declaration':
    'prefix': 'fd'
    'body': 'function ${1:fname}($2) {\n\t$3\n}'

  'function expression':
    'prefix': 'fe'
    'body': 'function ($1) {\n\t$2\n}'

  'wrapped function expression':
    'prefix': '(fe)'
    'body': '(function ($1) {\n\t$2\n})'

  'wrapped function expression (w/ semicolon)':
    'prefix': '(fe);'
    'body': '(function ($1) {\n\t$2\n});'

  'immediately-invoked function expression':
    'prefix': 'iife'
    'body': '(function($1) {\n$3\n}($2));'

  'jquery document.ready':
    'prefix': 'documentready'
    'body': '$(document).ready(function() {\n$2\n});'

  # Jasmine

  'it':
    'prefix': 'it'
    'body': 'it(\'$1\', function ($2) {\n\t$3\n});'

  'describe':
    'prefix': 'describe'
    'body': 'describe(\'$1\', function ($2) {\n\t$3\n});'

  'expect':
    'prefix': 'expect'
    'body': 'expect($1).${2:toBe}($3);'

# Awk

'.source.awk':

  'env awk':
    'prefix': 'env'
    'body': '#!/usr/bin/env awk -f\n'

  'BEGIN':
    'prefix': 'begin'
    'body': 'BEGIN {\n\t$1\n}'

  'END':
    'prefix': 'end'
    'body': 'END {\n\t$1\n}'

  'for':
    'prefix': 'for'
    'body': 'for (${1:i} = ${2:0}; ${1:i} < ${3:end}; ${1:i}${4:++}) {\n\t$5\n}'

  'print':
    'prefix': 'print'
    'body': 'print($1);'

  'printf':
    'prefix': 'printf'
    'body': 'printf($1);'

# Python 2 and 3

'.source.python':

  'env python':
    'prefix': 'env'
    'body': '#!/usr/bin/env python\n'

  'env python2':
    'prefix': 'env2'
    'body': '#!/usr/bin/env python2\n'

  'env python3':
    'prefix': 'env3'
    'body': '#!/usr/bin/env python3\n'

  'module import':
    'prefix': 'import'
    'body': 'import '

  'name import':
    'prefix': 'from'
    'body': 'from ${1:module} import ${2:name}'

  'docstring':
    'prefix': 'docstring'
    'body': '\"\"\"$1\"\"\"$2'

  'if':
    'prefix': 'if'
    'body': 'if ${1:condition}:\n\t${2:pass}'

  'elif':
    'prefix': 'elif'
    'body': 'elif ${1:condition}:\n\t${2:pass}'

  'else':
    'prefix': 'else'
    'body': 'else:\n\t${1:pass}'

  'for':
    'prefix': 'for'
    'body': 'for ${1:value} in ${2:iterable}:\n\t${3:pass}'

  'while':
    'prefix': 'while'
    'body': 'while ${1:condition}:\n\t${2:pass}'

  'try':
    'prefix': 'try'
    'body': 'try:\n\t${1:pass}'

  'except':
    'prefix': 'except'
    'body': 'except ${1:Exception}:\n\t${2:pass}'

  'finally':
    'prefix': 'finally'
    'body': 'finally:\n\t${1:pass}'

  'with':
    'prefix': 'with'
    'body': 'with ${1:contextmanager}:\n\t${2:pass}'

  'with open()':
    'prefix': 'withopen'
    'body': 'with open(${1:path}, \'${2:r}\') as ${3:file}:\n\t${4:pass}'

  'function':
    'prefix': 'def'
    'body': 'def ${1:fname}($2):\n\t${3:pass}'

  'magic method':
    'prefix': 'mdef'
    'body': 'def __${1:fname}__(self$2):\n\t${3:pass}'

  'class':
    'prefix': 'class'
    'body': 'class ${1:ClassName}(${2:object}):\n\t${3:pass}'

# PHP code (within PHP blocks)

'.source.php':

  'echo':
    'prefix': 'echo'
    'body': 'echo $1;'

  'print_r':
    'prefix': 'pr'
    'body': 'print_r( $1 );'

  'function':
    'prefix': 'f'
    'body': 'function ${1:fname}($2) {\n\t$3\n}'

  'class':
    'prefix': 'class'
    'body': 'class ${1:Class} {\n\t$2\n}'

  'constructor':
    'prefix': 'ctor'
    'body': 'function __construct($1) {\n\t$2\n}'

  'parent constructor':
    'prefix': 'pctor'
    'body': 'parent::__construct($1);'

  'public':
    'prefix': 'public'
    'body': 'public '

  'private':
    'prefix': 'private'
    'body': 'private '

  'protected':
    'prefix': 'protected'
    'body': 'protected '

  'if':
    'prefix': 'if'
    'body': 'if ( ${1:condition} ) {\n\t$2\n} $3'

  'else if':
    'prefix': 'elseif'
    'body': 'else if ( ${1:condition} ) {\n\t$2\n} $3'

  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'

  'not empty':
    'prefix': 'nem'
    'body': '! empty( $1 )'

  'for':
    'prefix': 'for'
    'body': 'for ( ${1:\$i} = ${2:0}; ${1:\$i} < ${3:end}; ${1:\$i} += ${4:1} ) {\n\t$5\n}'

  'foreach':
    'prefix': 'foreach'
    'body': 'foreach ( ${1:\$object} as ${2:\$value} ) {\n\t$3\n}'

  'while':
    'prefix': 'while'
    'body': 'while ( ${1:condition} ) {\n\t$2\n}'

  'array (one-line; space-padded)':
    'prefix': 'ar'
    'body': 'array( $1 )'

  'array (one-line; space-padded)':
    'prefix': 'ars'
    'body': ' array( $1 ) '

  'array (empty)':
    'prefix': 'are'
    'body': 'array()'

  'array (empty; space-padded)':
    'prefix': 'ares'
    'body': ' array() '

  'array (multiline)':
    'prefix': 'arn'
    'body': 'array(\n\t$1\n)'

  'array (multiline; space-padded)':
    'prefix': 'arns'
    'body': ' array(\n\t$1\n) '

  'key-value pair':
    'prefix': 'kv'
    'body': '\'${1:key}\' => ${2:value}$3'

  'define constant':
    'prefix': 'def'
    'body': 'define( \'$1\', ${2:false} );'

  'define constant conditionally':
    'prefix': 'ifndef'
    'body': 'if ( ! defined( \'$1\' ) ) {\n\tdefine( \'$1\', ${2:false} );\n}'

  'display errors':
    'prefix': 'derr'
    'body': 'ini_set( \'display_errors\', \'1\' );'

  'var_dump':
    'prefix': 'vd'
    'body': 'var_dump( $1 );'

# PHP markup (outside PHP blocks)

'.text.html.php':

  'PHP Block (inline)':
    'prefix': 'php'
    'body': '<?php $1 ?>$2'

  'PHP Block (multiline)':
    'prefix': 'phpblock'
    'body': '<?php\n\t$1\n?>$2'

  'PHP Block (HTML)':
    'prefix': 'phphtml'
    'body': '?>\n\t$1\n<?php$2'

  'echo (inline)':
    'prefix': 'pecho'
    'body': '<?php echo $1; ?>$2'

  'if (inline)':
    'prefix': 'pif'
    'body': '<?php if ( ${1:condition} ): ?>$2'

  'else (inline)':
    'prefix': 'pelse'
    'body': '<?php else: ?>$2'

  'else if (inline)':
    'prefix': 'pelseif'
    'body': '<?php elseif ( ${1:condition} ): ?>$2'

  'for (inline)':
    'prefix': 'pfor'
    'body': '<?php for ( ${1:\$i} = ${2:0}; ${1:\$i} < ${3:end}; ${1:\$i} += ${4:1} ): ?>$5'

  'foreach (inline)':
    'prefix': 'pforeach'
    'body': '<?php foreach ( ${1:\$object} as ${2:\$value} ): ?>$3'

  'while (inline)':
    'prefix': 'pwhile'
    'body': '<?php while ( ${1:condition} ): ?>$2'

  'endif (inline)':
    'prefix': 'pendif'
    'body': '<?php endif; ?>$1'

  'endfor (inline)':
    'prefix': 'pendfor'
    'body': '<?php endfor; ?>$1'

  'endforeach (inline)':
    'prefix': 'pendforeach'
    'body': '<?php endforeach; ?>$1'

  'endwhile (inline)':
    'prefix': 'pendwhile'
    'body': '<?php endwhile; ?>$1'

# Shell scripts (particularly Bash)

'.source.shell':

  'local variable':
    'prefix': 'local'
    'body': 'local ${1:vname}=${2:value}'

  'if':
    'prefix': 'if'
    'body': 'if ${1:condition}; then\n\t$2\nfi'

  'elif':
    'prefix': 'elif'
    'body': 'elif ${1:condition}; then\n\t$2'

  'else':
    'prefix': 'else'
    'body': 'else\n\t$2'

  'for..in':
    'prefix': 'for'
    'body': 'for ${1:f} in ${2:seq}; do\n\t$3\ndone'

  'function':
    'prefix': 'f'
    'body': '${1:fname}() {\n\t$2\n}'

# AppleScript

'.source.applescript':

  'property':
    'prefix': 'prop'
    'body': 'property ${1:pname} : ${2:value}'

  'set':
    'prefix': 'set'
    'body': 'set ${1:vname} to ${2:value}'

  'if':
    'prefix': 'if'
    'body': 'if ${1:condition} then\n\t$2\nend if'

  'if (one-line)':
    'prefix': 'ifthen'
    'body': 'if ${1:condition} then $2'

  'elseif':
    'prefix': 'elseif'
    'body': 'else if ${1:condition} then\n\t$2'

  'else':
    'prefix': 'else'
    'body': 'else\n\t$2'

  'repeat':
    'prefix': 'repeat'
    'body': 'repeat\n\t$1\nend repeat'

  'repeat from..to':
    'prefix': 'repeatfromto'
    'body': 'repeat with ${1:i} from ${2:1} to ${3:end}\n\t$4\nend repeat'

  'repeat in':
    'prefix': 'repeatin'
    'body': 'repeat with ${1:theItem} in ${2:object}\n\t$3\nend repeat'

  'repeat while':
    'prefix': 'repeatwhile'
    'body': 'repeat while ${1:condition}\n\t$2\nend repeat'

  'repeat until':
    'prefix': 'repeatuntil'
    'body': 'repeat until ${1:condition}\n\t$2\nend repeat'

  'repeat times':
    'prefix': 'repeattimes'
    'body': 'repeat ${1:n} times\n\t$2\nend repeat'

  'exit repeat':
    'prefix': 'exitrepeat'
    'body': 'exit repeat'

  'tell':
    'prefix': 'tell'
    'body': 'tell ${1:object}\n\t$2\nend tell'

  'tell app':
    'prefix': 'tellapp'
    'body': 'tell application "${1:App Name}"\n\t$2\nend tell'

  'try':
    'prefix': 'try'
    'body': 'try\n\t$1\nend try'

  'on error':
    'prefix': 'onerror'
    'body': 'on error number ${1:-128}\n\t$2'

  'display alert':
    'prefix': 'displayalert'
    'body': 'display alert ${1:theText} message ${2:theMessage}'

  'display dialog':
    'prefix': 'displaydialog'
    'body': 'display dialog ${1:theText} with title ${2:theTitle}'

  'display prompt':
    'prefix': 'displayprompt'
    'body': 'display dialog ${1:theText} with title ${2:theTitle} default answer ${3:theAnswer}'

  'choose file':
    'prefix': 'choosefile'
    'body': 'choose file default location ${2:alias textPath} with prompt ${3:thePrompt}'

  'choose folder':
    'prefix': 'choosefolder'
    'body': 'choose folder default location ${2:alias textPath} with prompt ${3:thePrompt}'

  'handler':
    'prefix': 'on'
    'body': 'on ${1:hname}($2)\n\t$3\nend ${1:hname}'

  'on run':
    'prefix': 'onrun'
    'body': 'on run ${1:argv}\n\t$3\nend run'

# SQL (particularly Oracle SQL)

'.source.sql':

  'create database':
    'prefix': 'createdatabase'
    'body': 'CREATE DATABASE ${1:dbname} COLLATE ${2:utf8_general_ci};'

  'create table':
    'prefix': 'createtable'
    'body': 'CREATE TABLE ${1:tname}(\n\t$2\n);'

  'alter table':
    'prefix': 'altertable'
    'body': 'ALTER TABLE ${1:tname}\n\t${2:actions};'

  'drop table':
    'prefix': 'droptable'
    'body': 'DROP TABLE ${1:tname};'

  'number':
    'prefix': 'number'
    'body': 'NUMBER(${1:total}, ${2:decimal})$3'

  'integer':
    'prefix': 'integer'
    'body': 'INTEGER'

  'char':
    'prefix': 'char'
    'body': 'CHAR(${1:maxlen})$2'

  'varchar2':
    'prefix': 'varchar2'
    'body': 'VARCHAR2(${1:maxlen})$2'

  'date':
    'prefix': 'date'
    'body': 'DATE'

  'constraint':
    'prefix': 'constraint'
    'body': 'CONSTRAINT ${1:cname} ${2:ctype}'

  'add constraint':
    'prefix': 'addconstraint'
    'body': 'ADD CONSTRAINT ${1:cname} ${2:ctype}'

  'drop constraint':
    'prefix': 'dropconstraint'
    'body': 'DROP CONSTRAINT ${1:cname}'

  'enable constraint':
    'prefix': 'enableconstraint'
    'body': 'ENABLE CONSTRAINT ${1:cname}'

  'disable constraint':
    'prefix': 'disableconstraint'
    'body': 'DISABLE CONSTRAINT ${1:cname}'

  'primary key':
    'prefix': 'primarykey'
    'body': 'PRIMARY KEY(${1:columns})$2'

  'foreign key':
    'prefix': 'foreignkey'
    'body': 'FOREIGN KEY(${1:column}) REFERENCES ${2:tname}(${3:column})$4'

  'not null':
    'prefix': 'notnull'
    'body': 'NOT NULL(${1:column})$2'

  'unique':
    'prefix': 'unique'
    'body': 'UNIQUE(${1:column})$2'

  'check':
    'prefix': 'check'
    'body': 'CHECK(${1:condition})$2'

  'select':
    'prefix': 'select'
    'body': 'SELECT ${1:*} FROM ${2:tname} WHERE ${3:condition};'

  'select distinct':
    'prefix': 'selectdistinct'
    'body': 'SELECT DISTINCT ${1:*} FROM ${2:tname} WHERE ${3:condition};'

  'where':
    'prefix': 'where'
    'body': 'WHERE '

  'and':
    'prefix': 'and'
    'body': 'AND '

  'or':
    'prefix': 'or'
    'body': 'OR '

  'between':
    'prefix': 'between'
    'body': 'BETWEEN '

  'like':
    'prefix': 'like'
    'body': 'LIKE '

  'rlike':
    'prefix': 'rlike'
    'body': 'RLIKE '

  'regexp':
    'prefix': 'regexp'
    'body': 'REGEXP '

  'insert':
    'prefix': 'insert'
    'body': 'INSERT INTO ${1:tname} (${2:columns}) VALUES (${3:values});'

  'update':
    'prefix': 'update'
    'body': 'UPDATE ${1:tname} SET ${2:column = value} WHERE ${3:condition};'

  'delete':
    'prefix': 'delete'
    'body': 'DELETE FROM ${1:tname} WHERE ${3:condition};'

  'inner join':
    'prefix': 'innerjoin'
    'body': 'INNER JOIN ${1:tname} ON ${2:condition}'

# Liquid templating engine

'.text.html.liquid,
 .source.gfm':

  'expression':
    'prefix': 'exp'
    'body': '{{ $1 }}'

  'liquid':
    'prefix': 'liquid'
    'body': '{% $1 %}'

  'assign':
    'prefix': 'assign'
    'body': '{% assign ${1:name} = ${2:value} %}'

  'include':
    'prefix': 'include'
    'body': '{% include ${1:filename}.html $2%}'

  'if':
    'prefix': 'if'
    'body': '{% if ${1:condition} %}$2'

  'elsif':
    'prefix': 'elseif'
    'body': '{% elsif %}$1'

  'else':
    'prefix': 'else'
    'body': '{% else %}$1'

  'endif':
    'prefix': 'endif'
    'body': '{% endif %}'

  'for':
    'prefix': 'for'
    'body': '{% for ${1:item} in ${2:object} %}$3'

  'endfor':
    'prefix': 'endfor'
    'body': '{% endfor %}'

# Apache configuration

'.source.apache-config':

  'Disable Indexes':
    'prefix': 'noindexes'
    'body': 'Options -Indexes'

  'ErrorDocument':
    'prefix': 'errordocument'
    'body': 'ErrorDocument ${1:404} ${2:url}'

  'IfModule':
    'prefix': 'ifmodule'
    'body': '<IfModule ${1:modname}.c>\n\t$2\n</IfModule>'

  'FilesMatch':
    'prefix': 'filesmatch'
    'body': '<FilesMatch \"${1:pattern}\">\n\t$2\n</FilesMatch>'

  'UTF-8':
    'prefix': 'utf8'
    'body': 'AddDefaultCharset utf-8\n<IfModule mod_mime.c>\n\tAddCharset utf-8 ${1:extensions}\n</IfModule>'

  'gzip':
    'prefix': 'gzip'
    'body': 'AddOutputFilterByType DEFLATE ${1:mimetypes}'

  'Header':
    'prefix': 'header'
    'body': 'Header ${1:set} ${2:name} ${3:value}'

  'Cache-Control':
    'prefix': 'cachecontrol'
    'body': 'Header set Cache-Control \"${1:max-age=}\"'

  'Content-Security-Policy':
    'prefix': 'contentsecuritypolicy'
    'body': 'Header always set Content-Security-Policy "${1:default-src \'none\'; }"'

  'X-Frame-Options':
    'prefix': 'frameoptions'
    'body': 'Header always set X-Frame-Options ${1:DENY}'

  'X-Content-Type-Options':
    'prefix': 'contenttypeoptions'
    'body': 'Header always set X-Content-Type-Options ${1:nosniff}'

  'HSTS':
    'prefix': 'hsts'
    'body': 'Header always set Strict-Transport-Security "max-age=${1:86400}; includeSubDomains" env=HTTPS'

  'Secure Cookies':
    'prefix': 'cookiesecure'
    'body': 'Header always edit Set-Cookie ^(.*)$ "\$1; HTTPOnly; Secure"'

  'RewriteEngine':
    'prefix': 'rewriteengine'
    'body': 'RewriteEngine ${1:On}'

  'RewriteBase':
    'prefix': 'rewritebase'
    'body': 'RewriteBase ${1:/}'

  'RewriteCond':
    'prefix': 'rewritecond'
    'body': 'RewriteCond %{${1:HTTP_HOST}} ${2:pattern}'

  'RewriteRule':
    'prefix': 'rewriterule'
    'body': 'RewriteRule ${1:pattern} ${2:url}'

  'HTTP to HTTPS':
    'prefix': 'https'
    'body': 'RewriteCond %{HTTPS} off\nRewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]'

  'www to apex':
    'prefix': 'apex'
    'body': 'RewriteCond %{HTTP_HOST} ^www\\\\.(.+)$ [NC]\nRewriteRule ^ ${1:http}://%1%{REQUEST_URI} [L,R=301]'
