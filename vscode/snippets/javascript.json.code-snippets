{
  "for": {
    "scope": "javascript,typescript",
    "prefix": "for",
    "body": [
      "for (${1:var} ${2:i} = ${3:0}; ${2:i} < ${4:end}; ${2:i} += ${5:1}) {",
      "\t$6",
      "}"
    ]
  },
  "for..in": {
    "scope": "javascript,typescript",
    "prefix": "forin",
    "body": [
      "for (var ${1:key} in ${2:object}) {",
      "\tif Object.prototype.hasOwnProperty.call(${2:object}, ${1:key})) {",
      "\t\t$3",
      "\t}",
      "}"
    ]
  },
  "function declaration": {
    "scope": "javascript,typescript",
    "prefix": "fd",
    "body": [
      "function ${1:fname}($2) {",
      "\t$3",
      "}$4"
    ]
  },
  "function expression": {
    "scope": "javascript,typescript",
    "prefix": "fe",
    "body": [
      "function ($1) {",
      "\t$2",
      "}$3"
    ]
  },
  "arrow function": {
    "scope": "javascript,typescript",
    "prefix": "af",
    "body": [
      "($1) => {",
      "\t$2",
      "}$3"
    ]
  },
  "arrow function (inline)": {
    "scope": "javascript,typescript",
    "prefix": "afi",
    "body": [
      "($1) => $2"
    ]
  },
  "empty function": {
    "scope": "javascript,typescript",
    "prefix": "noop",
    "body": [
      "function () {}"
    ]
  },
  "immediately-invoked function expression": {
    "scope": "javascript,typescript",
    "prefix": "iife",
    "body": [
      "(function ($1) {",
      "$2",
      "}($3));"
    ]
  },
  "jquery document.ready": {
    "scope": "javascript,typescript",
    "prefix": "docready",
    "body": [
      "$(document).ready(function () {",
      "$2",
      "});"
    ]
  },
  "document": {
    "scope": "javascript,typescript",
    "prefix": "doc",
    "body": [
      "document"
    ]
  },
  "querySelector": {
    "scope": "javascript,typescript",
    "prefix": "qs",
    "body": [
      "querySelector($1)$2"
    ]
  },
  "querySelectorAll": {
    "scope": "javascript,typescript",
    "prefix": "qsa",
    "body": [
      "querySelectorAll($1)$2"
    ]
  },
  "addEventListener": {
    "scope": "javascript,typescript",
    "prefix": "addeventlistener",
    "body": [
      "addEventListener($1, $2);$3"
    ]
  },
  "preventDefault": {
    "scope": "javascript,typescript",
    "prefix": "preventdefault",
    "body": [
      "preventDefault();"
    ]
  },
  "stopPropagation": {
    "scope": "javascript,typescript",
    "prefix": "stoppropagation",
    "body": [
      "stopPropagation();"
    ]
  },
  "stopImmediatePropagation": {
    "scope": "javascript,typescript",
    "prefix": "stopimmediatepropagation",
    "body": [
      "stopImmediatePropagation();"
    ]
  },
  "requestAnimationFrame": {
    "scope": "javascript,typescript",
    "prefix": "raf",
    "body": [
      "requestAnimationFrame($1);$2"
    ]
  },
  "use strict": {
    "scope": "javascript,typescript",
    "prefix": "usestrict",
    "body": [
      "'use strict';",
      ""
    ]
  },
  "require": {
    "scope": "javascript,typescript",
    "prefix": "re",
    "body": [
      "require('${1:mname}');$4"
    ]
  },
  "module.exports": {
    "scope": "javascript,typescript",
    "prefix": "modexp",
    "body": [
      "module.exports = ${1:object};"
    ]
  },
  "JSON.stringify": {
    "scope": "javascript,typescript",
    "prefix": "jsonstringify",
    "body": [
      "JSON.stringify($1)$2"
    ]
  },
  "JSON.parse": {
    "scope": "javascript,typescript",
    "prefix": "jsonparse",
    "body": [
      "JSON.parse($1)$2"
    ]
  },
  "class": {
    "scope": "javascript,typescript",
    "prefix": "class",
    "body": [
      "class ${1:ClassName} {",
      "\t$2",
      "}$3"
    ]
  },
  "constructor": {
    "scope": "javascript,typescript",
    "prefix": "ctor",
    "body": [
      "constructor($2) {",
      "\t$3",
      "}$4"
    ]
  },
  "function method": {
    "scope": "javascript,typescript",
    "prefix": "fm",
    "body": [
      "${1:fname}($2) {",
      "\t$3",
      "}$4"
    ]
  },
  "static keyword": {
    "scope": "javascript,typescript",
    "prefix": "static",
    "body": [
      "static"
    ]
  },
  "static method": {
    "scope": "javascript,typescript",
    "prefix": "staticf",
    "body": [
      "static ${1:fname}() {",
      "\t$2",
      "}$3"
    ]
  },
  "import": {
    "scope": "javascript,typescript",
    "prefix": "import",
    "body": [
      "import ${1:mname} from '${2:path}';$3"
    ]
  },
  "export default": {
    "scope": "javascript,typescript",
    "prefix": "exportdefault",
    "body": [
      "export default ${1:mname};"
    ]
  },
  "eslint disable": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisable",
    "body": [
      "/* eslint-disable */"
    ]
  },
  "eslint disable rule": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisablerule",
    "body": [
      "/* eslint-disable $1 */$2"
    ]
  },
  "eslint disable next": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisablenext",
    "body": [
      "/* eslint-disable-next-line */"
    ]
  },
  "eslint disable next rule": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisablenextrule",
    "body": [
      "/* eslint-disable-next-line $1 */$2"
    ]
  },
  "eslint no unused vars": {
    "scope": "javascript,typescript",
    "prefix": "eslintnounusedvars",
    "body": [
      "/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"${1:main}\" }] */$2"
    ]
  },
  "it": {
    "scope": "javascript,typescript",
    "prefix": "it",
    "body": [
      "it('$1', function ($2) {",
      "\t$3",
      "});"
    ]
  },
  "describe": {
    "scope": "javascript,typescript",
    "prefix": "describe",
    "body": [
      "describe('$1', function ($2) {",
      "\t$3",
      "});"
    ]
  },
  "expect": {
    "scope": "javascript,typescript",
    "prefix": "expect",
    "body": [
      "expect($1).$2"
    ]
  },
  "beforeEach": {
    "scope": "javascript,typescript",
    "prefix": "beforeeach",
    "body": [
      "beforeEach(function ($1) {",
      "\t$2",
      "});"
    ]
  },
  "afterEach": {
    "scope": "javascript,typescript",
    "prefix": "aftereach",
    "body": [
      "afterEach(function ($1) {",
      "\t$2",
      "});"
    ]
  },
  "to be": {
    "scope": "javascript,typescript",
    "prefix": "tobe",
    "body": [
      "to.be."
    ]
  },
  "not to be": {
    "scope": "javascript,typescript",
    "prefix": "nottobe",
    "body": [
      "not.to.be."
    ]
  },
  "to equal": {
    "scope": "javascript,typescript",
    "prefix": "toequal",
    "body": [
      "to.equal($1);$2"
    ]
  },
  "not to equal": {
    "scope": "javascript,typescript",
    "prefix": "nottoequal",
    "body": [
      "not.to.equal($1);$2"
    ]
  },
  "to deep equal": {
    "scope": "javascript,typescript",
    "prefix": "todeepequal",
    "body": [
      "to.deep.equal($1);$2"
    ]
  },
  "not to deep equal": {
    "scope": "javascript,typescript",
    "prefix": "nottodeepequal",
    "body": [
      "not.to.deep.equal($1);$2"
    ]
  },
  "to have length": {
    "scope": "javascript,typescript",
    "prefix": "tohavelen",
    "body": [
      "to.have.lengthOf($1);$2"
    ]
  },
  "not to have length": {
    "scope": "javascript,typescript",
    "prefix": "nottohavelen",
    "body": [
      "not.to.have.lengthOf($1);$2"
    ]
  },
  "to have property": {
    "scope": "javascript,typescript",
    "prefix": "tohaveprop",
    "body": [
      "to.have.property($1);$2"
    ]
  },
  "not to have property": {
    "scope": "javascript,typescript",
    "prefix": "nottohaveprop",
    "body": [
      "not.to.have.property($1);$2"
    ]
  },
  "to be instance of": {
    "scope": "javascript,typescript",
    "prefix": "tobeinstanceof",
    "body": [
      "to.be.instanceOf($1);$2"
    ]
  },
  "not to be instance of": {
    "scope": "javascript,typescript",
    "prefix": "nottobeinstanceof",
    "body": [
      "not.to.be.instanceOf($1);$2"
    ]
  },
  "console.log": {
    "scope": "javascript,typescript",
    "prefix": "log",
    "body": [
      "console.log('$1', ${2:this});"
    ]
  },
  "console.error": {
    "scope": "javascript,typescript",
    "prefix": "error",
    "body": [
      "console.error($1);"
    ]
  },
  "debugger": {
    "scope": "javascript,typescript",
    "prefix": "debugger",
    "body": [
      "debugger;"
    ]
  },
  "getAbsoluteUrl": {
    "scope": "javascript,typescript",
    "prefix": "getabsoluteurl",
    "body": [
      "getAbsoluteUrl($1)$2"
    ]
  },
  "getThemeAbsoluteUrl": {
    "scope": "javascript,typescript",
    "prefix": "getthemeabsoluteurl",
    "body": [
      "getThemeAbsoluteUrlOfNonManagedResources($1)$2"
    ]
  },
  "log execution": {
    "scope": "javascript,typescript",
    "prefix": "nlapiLogExecution",
    "body": [
      "nlapiLogExecution('${1:DEBUG}', '${2:title}', ${3:object});"
    ]
  },
  "create error": {
    "scope": "javascript,typescript",
    "prefix": "nlapiCreateError",
    "body": [
      "nlapiCreateError('${1:title}', '${2:message}');"
    ]
  },
  "create record": {
    "scope": "javascript,typescript",
    "prefix": "nlapiCreateRecord",
    "body": [
      "nlapiCreateRecord('${1:recordtype}');"
    ]
  },
  "load record": {
    "scope": "javascript,typescript",
    "prefix": "nlapiLoadRecord",
    "body": [
      "nlapiLoadRecord(${1:recordtype}, ${2:internalid});"
    ]
  },
  "search record": {
    "scope": "javascript,typescript",
    "prefix": "nlapiSearchRecord",
    "body": [
      "nlapiSearchRecord(${1:recordtype}, ${2:null}, ${3:filters});"
    ]
  },
  "get new record": {
    "scope": "javascript,typescript",
    "prefix": "nlapiGetNewRecord",
    "body": [
      "nlapiGetNewRecord();"
    ]
  },
  "get record id": {
    "scope": "javascript,typescript",
    "prefix": "nlapiGetRecordId",
    "body": [
      "nlapiGetRecordId();"
    ]
  },
  "get record type": {
    "scope": "javascript,typescript",
    "prefix": "nlapiGetRecordType",
    "body": [
      "nlapiGetRecordType();"
    ]
  },
  "search filter": {
    "scope": "javascript,typescript",
    "prefix": "nlobjSearchFilter",
    "body": [
      "nlobjSearchFilter('${1:fieldname}', ${2:null}, '${3:is}', ${4:value})$5"
    ]
  },
  "search column": {
    "scope": "javascript,typescript",
    "prefix": "nlobjSearchColumn",
    "body": [
      "nlobjSearchColumn('${1:fieldname}'$2)$3"
    ]
  },
  "get value": {
    "scope": "javascript,typescript",
    "prefix": "getValue",
    "body": [
      "getValue(${1:fieldname})$2"
    ]
  },
  "get text": {
    "scope": "javascript,typescript",
    "prefix": "getText",
    "body": [
      "getText(${1:fieldname})$2"
    ]
  },
  "get field value": {
    "scope": "javascript,typescript",
    "prefix": "getFieldValue",
    "body": [
      "getFieldValue(${1:fieldname})$2"
    ]
  },
  "get field text": {
    "scope": "javascript,typescript",
    "prefix": "getFieldText",
    "body": [
      "getFieldText(${1:fieldname})$2"
    ]
  },
  "set field value": {
    "scope": "javascript,typescript",
    "prefix": "setFieldValue",
    "body": [
      "setFieldValue(${1:fieldname}, ${2:value})$3"
    ]
  },
  "submit record": {
    "scope": "javascript,typescript",
    "prefix": "nlapiSubmitRecord",
    "body": [
      "nlapiSubmitRecord(${1:record});"
    ]
  },
  "script parameter": {
    "scope": "javascript,typescript",
    "prefix": "getscriptparameter",
    "body": [
      "getSetting('SCRIPT', 'custscript_${1:paramname}')"
    ]
  },
  "log.debug": {
    "scope": "javascript,typescript",
    "prefix": "logdebug",
    "body": [
      "log.debug({title: '${1:title}', details: ${2:details}});"
    ]
  },
  "log.error": {
    "scope": "javascript,typescript",
    "prefix": "logerror",
    "body": [
      "log.error({title: '${1:title}', details: ${2:details}});"
    ]
  },
  "search.create": {
    "scope": "javascript,typescript",
    "prefix": "searchcreate",
    "body": [
      "search.create({",
      "\ttype: '${1:type}'$2",
      "})$3"
    ]
  },
  "record.create": {
    "scope": "javascript,typescript",
    "prefix": "recordcreate",
    "body": [
      "record.create({",
      "\ttype: '${1:type}'$2",
      "})$3"
    ]
  },
  "record.load": {
    "scope": "javascript,typescript",
    "prefix": "recordload",
    "body": [
      "record.load({",
      "\ttype: '${1:type}'",
      "\tid: ${2:id}",
      "})$4"
    ]
  },
  "getValue": {
    "scope": "javascript,typescript",
    "prefix": "getvalue",
    "body": [
      "getValue({name: '$1'$2})$3"
    ]
  },
  "getText": {
    "scope": "javascript,typescript",
    "prefix": "gettext",
    "body": [
      "getText({name: '$1'$2})$3"
    ]
  },
  "setValue": {
    "scope": "javascript,typescript",
    "prefix": "setvalue",
    "body": [
      "setValue({",
      "\tname: '$1',",
      "\tvalue: ${2:val}",
      "})$3"
    ]
  },
  "setText": {
    "scope": "javascript,typescript",
    "prefix": "settext",
    "body": [
      "setText({",
      "\tname: '$1',",
      "\ttext: ${2:val}",
      "})$3"
    ]
  },
  "getSublistValue": {
    "scope": "javascript,typescript",
    "prefix": "getsublistvalue",
    "body": [
      "getSublistValue({",
      "\tsublistId: '$1',",
      "\tline: ${2:0},",
      "\tfieldId: '$3'",
      "})$4"
    ]
  },
  "getSublistText": {
    "scope": "javascript,typescript",
    "prefix": "getsublisttext",
    "body": [
      "getSublistText({",
      "\tsublistId: '$1',",
      "\tline: ${2:0},",
      "\tfieldId: '$3'",
      "})$4"
    ]
  },
  "setSublistValue": {
    "scope": "javascript,typescript",
    "prefix": "setsublistvalue",
    "body": [
      "setSublistValue({",
      "\tsublistId: '$1',",
      "\tline: ${2:0},",
      "\tfieldId: '$3',",
      "\tvalue: ${4:val}",
      "})$5"
    ]
  },
  "setSublistText": {
    "scope": "javascript,typescript",
    "prefix": "setsublisttext",
    "body": [
      "setSublistText({",
      "\tsublistId: '$1',",
      "\tline: ${2:0},",
      "\tfieldId: '$3',",
      "\ttext: ${4:val}",
      "})$5"
    ]
  },
  "AMD module": {
    "scope": "javascript,typescript",
    "prefix": "define",
    "body": [
      "define('${1:Extension.Module}', [",
      "\t'$2'$3",
      "], function (",
      "\t$4",
      ") {",
      "\t'use strict';",
      "",
      "\treturn ${5:exported};",
      "",
      "});"
    ]
  },
  "mountToApp": {
    "scope": "javascript,typescript",
    "prefix": "mta",
    "body": [
      "{",
      "\tmountToApp: function ($1) {",
      "",
      "\t\t$2",
      "",
      "\t}",
      "}"
    ]
  },
  "wrap prototype method": {
    "scope": "javascript,typescript",
    "prefix": "wrap",
    "body": [
      "${1:Module}.prototype.${2:methodName} = _.wrap(${1:Module}.prototype.${2:methodName}, function (fn) {",
      "\tfn.apply(this, _.toArray(arguments).slice(1));$3",
      "});"
    ]
  },
  "add child view": {
    "scope": "javascript,typescript",
    "prefix": "childview",
    "body": [
      "${1:Module}.prototype.childViews['$2'] = function () {",
      "\treturn new ${3:ChildView}({",
      "\t\tmodel: this.model$4",
      "\t});",
      "};$5"
    ]
  },
  "wrap getContext": {
    "scope": "javascript,typescript",
    "prefix": "getcontext",
    "body": [
      "${1:Module}.prototype.getContext = _.wrap(${1:Module}.prototype.getContext, function (fn) {",
      "\tvar context = fn.apply(this, _.toArray(arguments).slice(1));",
      "\t${3:// additional context variables here}",
      "\treturn context;",
      "});"
    ]
  },
  "call parent method": {
    "scope": "javascript,typescript",
    "prefix": "fnapply",
    "body": [
      "fn.apply(this, _.toArray(arguments).slice(1));"
    ]
  },
  "prototype": {
    "scope": "javascript,typescript",
    "prefix": "proto",
    "body": [
      "prototype"
    ]
  },
  "toLowerCase": {
    "scope": "javascript,typescript",
    "prefix": "tlc",
    "body": [
      "toLowerCase()"
    ]
  },
  "toUpperCase": {
    "scope": "javascript,typescript",
    "prefix": "tuc",
    "body": [
      "toUpperCase()"
    ]
  },
  "encodeURIComponent": {
    "scope": "javascript,typescript",
    "prefix": "encodeuricomponent",
    "body": [
      "encodeURIComponent($1)$2"
    ]
  },
  "encodeURI": {
    "scope": "javascript,typescript",
    "prefix": "encodeuri",
    "body": [
      "encodeURI($1)$2"
    ]
  }
}