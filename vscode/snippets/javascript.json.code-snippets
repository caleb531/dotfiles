{
  "for": {
    "scope": "javascript,typescript",
    "prefix": "for",
    "body": [
      "for (${1:var} ${2:i} = ${3:0}; ${2:i} < ${4:end}; ${2:i} += ${5:1}) {",
      "\t$6",
      "}"
    ]
  },
  "for..in": {
    "scope": "javascript,typescript",
    "prefix": "forin",
    "body": [
      "for (var ${1:key} in ${2:object}) {",
      "\tif Object.prototype.hasOwnProperty.call(${2:object}, ${1:key})) {",
      "\t\t$3",
      "\t}",
      "}"
    ]
  },
  "function declaration": {
    "scope": "javascript,typescript",
    "prefix": "fd",
    "body": [
      "function ${1:fname}($2) {",
      "\t$3",
      "}"
    ]
  },
  "function expression": {
    "scope": "javascript,typescript",
    "prefix": "fe",
    "body": [
      "function ($1) {",
      "\t$2",
      "}"
    ]
  },
  "arrow function": {
    "scope": "javascript,typescript",
    "prefix": "af",
    "body": [
      "($1) => {",
      "\t$2",
      "}"
    ]
  },
  "arrow function (inline)": {
    "scope": "javascript,typescript",
    "prefix": "afi",
    "body": [
      "($1) => "
    ]
  },
  "empty function": {
    "scope": "javascript,typescript",
    "prefix": "noop",
    "body": [
      "function () {}"
    ]
  },
  "immediately-invoked function expression": {
    "scope": "javascript,typescript",
    "prefix": "iife",
    "body": [
      "(function ($1) {",
      "$2",
      "}($3));"
    ]
  },
  "jquery document.ready": {
    "scope": "javascript,typescript",
    "prefix": "docready",
    "body": [
      "\\$(document).ready(function () {",
      "$2",
      "});"
    ]
  },
  "document": {
    "scope": "javascript,typescript",
    "prefix": "doc",
    "body": [
      "document"
    ]
  },
  "querySelector": {
    "scope": "javascript,typescript",
    "prefix": "qs",
    "body": [
      "querySelector($1)"
    ]
  },
  "querySelectorAll": {
    "scope": "javascript,typescript",
    "prefix": "qsa",
    "body": [
      "querySelectorAll($1)"
    ]
  },
  "addEventListener": {
    "scope": "javascript,typescript",
    "prefix": "addeventlistener",
    "body": [
      "addEventListener($1, $2);"
    ]
  },
  "preventDefault": {
    "scope": "javascript,typescript",
    "prefix": "preventdefault",
    "body": [
      "preventDefault();"
    ]
  },
  "stopPropagation": {
    "scope": "javascript,typescript",
    "prefix": "stoppropagation",
    "body": [
      "stopPropagation();"
    ]
  },
  "stopImmediatePropagation": {
    "scope": "javascript,typescript",
    "prefix": "stopimmediatepropagation",
    "body": [
      "stopImmediatePropagation();"
    ]
  },
  "requestAnimationFrame": {
    "scope": "javascript,typescript",
    "prefix": "raf",
    "body": [
      "requestAnimationFrame($1);"
    ]
  },
  "use strict": {
    "scope": "javascript,typescript",
    "prefix": "usestrict",
    "body": [
      "'use strict';",
      ""
    ]
  },
  "require": {
    "scope": "javascript,typescript",
    "prefix": "re",
    "body": [
      "require('${1:mname}');"
    ]
  },
  "module.exports": {
    "scope": "javascript,typescript",
    "prefix": "modexp",
    "body": [
      "module.exports = ${1:object};"
    ]
  },
  "JSON.stringify": {
    "scope": "javascript,typescript",
    "prefix": "jsonstringify",
    "body": [
      "JSON.stringify($1)"
    ]
  },
  "JSON.parse": {
    "scope": "javascript,typescript",
    "prefix": "jsonparse",
    "body": [
      "JSON.parse($1)"
    ]
  },
  "class": {
    "scope": "javascript,typescript",
    "prefix": "class",
    "body": [
      "class ${1:ClassName} {",
      "\t$2",
      "}"
    ]
  },
  "constructor": {
    "scope": "javascript,typescript",
    "prefix": "ctor",
    "body": [
      "constructor($2) {",
      "\t$3",
      "}"
    ]
  },
  "function method": {
    "scope": "javascript,typescript",
    "prefix": "fm",
    "body": [
      "${1:fname}($2) {",
      "\t$3",
      "}"
    ]
  },
  "static keyword": {
    "scope": "javascript,typescript",
    "prefix": "static",
    "body": [
      "static"
    ]
  },
  "static method": {
    "scope": "javascript,typescript",
    "prefix": "staticf",
    "body": [
      "static ${1:fname}() {",
      "\t$2",
      "}"
    ]
  },
  "import": {
    "scope": "javascript,typescript",
    "prefix": "import",
    "body": [
      "import ${1:mname} from '${2:path}';"
    ]
  },
  "export": {
    "scope": "javascript,typescript",
    "prefix": "export",
    "body": [
      "export ${1:mname};"
    ]
  },
  "export default": {
    "scope": "javascript,typescript",
    "prefix": "exportdefault",
    "body": [
      "export default ${1:mname};"
    ]
  },
  "eslint disable": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisable",
    "body": [
      "/* eslint-disable */"
    ]
  },
  "eslint disable rule": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisablerule",
    "body": [
      "/* eslint-disable $1 */"
    ]
  },
  "eslint disable next": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisablenext",
    "body": [
      "/* eslint-disable-next-line */"
    ]
  },
  "eslint disable next rule": {
    "scope": "javascript,typescript",
    "prefix": "eslintdisablenextrule",
    "body": [
      "/* eslint-disable-next-line $1 */"
    ]
  },
  "eslint no unused vars": {
    "scope": "javascript,typescript",
    "prefix": "eslintnounusedvars",
    "body": [
      "/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"${1:main}\" }] */"
    ]
  },
  "console.log": {
    "scope": "javascript,typescript",
    "prefix": "log",
    "body": [
      "console.log('$1', ${2:this});"
    ]
  },
  "console.error": {
    "scope": "javascript,typescript",
    "prefix": "error",
    "body": [
      "console.error($1);"
    ]
  },
  "debugger": {
    "scope": "javascript,typescript",
    "prefix": "debugger",
    "body": [
      "debugger;"
    ]
  },
  "prototype": {
    "scope": "javascript,typescript",
    "prefix": "proto",
    "body": [
      "prototype"
    ]
  },
  "toLowerCase": {
    "scope": "javascript,typescript",
    "prefix": "tlc",
    "body": [
      "toLowerCase()"
    ]
  },
  "toUpperCase": {
    "scope": "javascript,typescript",
    "prefix": "tuc",
    "body": [
      "toUpperCase()"
    ]
  },
  "encodeURIComponent": {
    "scope": "javascript,typescript",
    "prefix": "encodeuricomponent",
    "body": [
      "encodeURIComponent($1)"
    ]
  },
  "encodeURI": {
    "scope": "javascript,typescript",
    "prefix": "encodeuri",
    "body": [
      "encodeURI($1)"
    ]
  }
}
