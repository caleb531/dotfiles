{
  "Backbone.Model.extend": {
    "scope": "javascript,typescript",
    "prefix": "backbonemodelextend",
    "body": [
      "Backbone.Model.extend({",
      "\t$1",
      "});"
    ]
  },
  "Backbone.View.extend": {
    "scope": "javascript,typescript",
    "prefix": "backboneviewextend",
    "body": [
      "Backbone.View.extend({",
      "\t$1",
      "});"
    ]
  },
  "Backbone.Collection.extend": {
    "scope": "javascript,typescript",
    "prefix": "backbonecollectionextend",
    "body": [
      "Backbone.Collection.extend({",
      "\t$1",
      "});"
    ]
  },
  "Backbone.Router.extend": {
    "scope": "javascript,typescript",
    "prefix": "backbonerouterextend",
    "body": [
      "Backbone.Router.extend({",
      "\t$1",
      "});"
    ]
  },
  "getAbsoluteUrl": {
    "scope": "javascript,typescript",
    "prefix": "getabsoluteurl",
    "body": [
      "getAbsoluteUrl($1)"
    ]
  },
  "getThemeAbsoluteUrl": {
    "scope": "javascript,typescript",
    "prefix": "getthemeabsoluteurl",
    "body": [
      "getThemeAbsoluteUrlOfNonManagedResources($1)"
    ]
  },
  "AMD module": {
    "scope": "javascript,typescript",
    "prefix": "define",
    "body": [
      "define('${1:$TM_FILENAME_BASE}', [",
      "\t'$2'$3",
      "], function (",
      "\t$4",
      ") {",
      "\t'use strict';",
      "",
      "\treturn ${5:exported};",
      "",
      "});"
    ]
  },
  "AMD module name": {
    "scope": "typescript",
    "prefix": "amdmodulename",
    "body": [
      "/// <amd-module name=\"${1:$TM_FILENAME_BASE}\"/>"
    ]
  },
  "mountToApp": {
    "scope": "javascript",
    "prefix": "mta",
    "body": [
      "{",
      "\tmountToApp: function (${1:application}) {",
      "",
      "\t\t$2",
      "",
      "\t}",
      "}"
    ]
  },
  "mountToApp (TypeScript)": {
    "scope": "typescript",
    "prefix": "mta",
    "body": [
      "export function mountToApp(${1:application}): void {",
      "\t$2",
      "}"
    ]
  },
  "wrap prototype method": {
    "scope": "javascript,typescript",
    "prefix": "wrap",
    "body": [
      "${1:Module}.prototype.${2:methodName} = _.wrap(${1:Module}.prototype.${2:methodName}, function (fn) {",
      "\tfn.apply(this, _.toArray(arguments).slice(1));$3",
      "});"
    ]
  },
  "add child view": {
    "scope": "javascript,typescript",
    "prefix": "childview",
    "body": [
      "${1:Module}.prototype.childViews['$2'] = function () {",
      "\treturn new ${3:ChildView}({",
      "\t\tmodel: this.model$4",
      "\t});",
      "};"
    ]
  },
  "wrap getContext": {
    "scope": "javascript,typescript",
    "prefix": "getcontext",
    "body": [
      "${1:Module}.prototype.getContext = _.wrap(${1:Module}.prototype.getContext, function (fn) {",
      "\t${3|var,let,const|} context = fn.apply(this, _.toArray(arguments).slice(1));",
      "\t${4:// additional context variables here}",
      "\treturn context;",
      "});"
    ]
  },
  "call parent method": {
    "scope": "javascript,typescript",
    "prefix": "fnapply",
    "body": [
      "fn.apply(this, _.toArray(arguments).slice(1));"
    ]
  },
  "config modifications": {
    "scope": "json,jsonc",
    "prefix": "modifications",
    "body": [
      "\"modifications\": {",
      "\t\"target\": \"$.properties$1\",",
      "\t\"action\": \"${2|add,replace,remove|}\",",
      "\t\"value\": ${3:true}",
      "}"
    ]
  }
}
