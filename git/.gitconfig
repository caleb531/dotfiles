# .gitconfig
# Caleb Evans

# Store user credentials in macOS Keychain
[credential]
	helper = osxkeychain

# Core configuration
[core]
	# Use a global .gitignore for project-independent files
	excludesfile = ~/dotfiles/git/gitignore_global

# Designate main as the default branch name
[init]
	defaultBranch = main

# Push/pull current branch by default (when no arguments are given)
[push]
	default = simple
	autoSetupRemote = true
[pull]
	default = simple
	# Merge and pull by default
	rebase = false

# Sort branch list (`git branch`) in order of most-recent commits (source:
# <https://stackoverflow.com/a/56585849/560642>)
[branch]
	sort = -committerdate

[diff]
	# Enable more-logical grouping of changes in diffs
	indentHeuristic = true
	# Consider a "word" a string of uppercase letters OR a string of lowercase
	# letters OR a single non-space character
	wordRegex = [A-Z0-9]+|[A-Z0-9]?[a-z0-9]+|[^[:space:]]

# Sort tags numerically in descending order
[tag]
	sort = -v:refname

[log]
	# Set a more human-readable default date format for git log
	date = format:%a %b %-d %Y @ %-I:%M %p

# Set pleasant colors for diffs
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

# Disable "advice" help messages
[advice]
	# Advice shown when git refuses to merge or checkout due to local changes
	commitBeforeMerge = false
	# Advice shown when entering detached HEAD state
	detachedHead = false
	# Advice shown when push is rejected by remote
	pushUpdateRejected = false
	# Advice shown when running `git status`
	statusHints = false

# Useful Git aliases
[alias]
	# Stage all
	adda = add -A
	# Stage interactively
	addp = add -p
	# Abort applying a mailbox patch
	ama = am --abort
	# Apply patch, storing conflicts in .rej files
	applyr = apply --reject
	# Get a bullet-list changelog of commits compared to another branch
	changelog = log --pretty=format:'- %s' --reverse
	# Apply a commit to the working directory
	chp = cherry-pick
	chpa = cherry-pick --abort
	chpc = cherry-pick --continue
	chpm = cherry-pick --allow-empty -m 1
	chpn = cherry-pick --no-commit
	# Discard untracked files and directories
	cleanfd = clean -fd
	# Modify the previous commit
	commita = commit --amend
	# convenient alias for misspellings of 'commit'
	commiy = commit
	# Delete branches that have been merged in
	delete-merged-local-branches = "!f() { git view-merged-local-branches ${1:-main} | xargs git branch -d; }; f"
	delete-merged-remote-branches = "!f() { git remote prune origin && git view-merged-remote-branches ${1:-main} | xargs git push -d origin; }; f"
	# Diff staged changes
	diffc = diff --cached
	# Diff files, highlighting only the changes within each line
	diffcw = diff --color-words
	diffcwc = diff --color-words --cached
	diffcwcw = diff --ignore-all-space --color-words --cached
	diffcwlasttag = !git diff --color-words $(git lasttag)
	# Diff two files outside of a git repository
	diffni = diff --no-index
	diffnicw = diff --no-index --color-words
	diffniwcw = diff --no-index --ignore-all-space --color-words
	diffniw = diff --no-index --ignore-all-space
	# List the paths of changed files
	diffno = diff --name-only
	diffnoc = diff --name-only --cached
	# List the statuses of changed files (added, modified, etc.)
	diffns = diff --name-status
	diffnsc = diff --name-status --cached
	# Show the diff of the current working directory since the last Git tag
	difflasttag = !git diff $(git lasttag)
	# Diff files, ignoring all whitespace changes
	diffw = diff --ignore-all-space
	diffwc = diff --ignore-all-space --cached
	diffwcw = diff --ignore-all-space --color-words
	diffwcwc = diff --ignore-all-space --color-words --cached
	# Exports a patch file
	fp = format-patch
	fps = format-patch --stdout
	fps1 = format-patch -1 --stdout
	# Convenience alias for when I typo `ga`
	ga = add
	gap = add -p
	# Run Git's garbage collection, removing all loose objects
	gcpn = gc --prune=now
	# Convenience alias for when I typo `gs`
	gs = status
	# Get the name of the last tag
	lasttag = describe --tags --abbrev=0
	# Show the very first commit to the repository
	log0 = log --max-parents=0
	# Show only merge commits
	log2 = log --min-parents=2
	# Display any branch and tag pointers next to each commit
	logd = log --decorate
	# Show all commits that touched a given file
	logf = log --follow
	# Show all commits since the last tag
	loglasttag = !git log $(git lasttag)..HEAD
	# List commits with descriptions containing the given string
	logg = log --fixed-strings --regexp-ignore-case --grep
	# Display commits with a list of the files in each commit
	logno = log --name-only
	# Display commits with a list of the files/statuses in each commit
	logns = log --name-status
	# Display commits in a flat, pretty, one-line format
	logo = log --pretty=format:'%C(yellow)%h%C(reset) %s %C(green)(%cr)'
	# List commits with code changes containing the given string
	logs = log -S
	# List all tracked files, relative to the current directory
	ls = "!f() { git ls-tree -r --name-status ${1:-HEAD}; }; f"
	# Managing merges
	mergea = merge --abort
	mergec = merge --continue
	# Merge branches without fast-forwards, always ensuring a merge commit
	mergenff = merge --no-ff
	# Copy to the clipboard the commit message of the given commit
	msg = !git show -s --format=%B $@ | pbcopy
	# Misspellings of `git push`
	oush = push
	puhs = push
	# Pull master into the current branch
	pom = pull origin main
	pullom = pull origin main
	# Pull from remote, recommitting unpushed changes atop the pulled commits
	pullr = pull --rebase
	# Push any unpushed tags (this will *not* push unpushed commits)
	pusht = push --tags
	# Push commits and push tags in succession
	pushtt = !git push && git push --tags
	# Force push only if the current branch's local origin matches the actual
	# remote
	pushf = push --force-with-lease
	# Push the current branch to a new remote branch of the same name
	pushu = !git push -u origin $(git rev-parse --abbrev-ref HEAD)
	# Rebasing!
	reba = rebase --abort
	rebasea = rebase --abort
	rebc = rebase --continue
	rebasec = rebase --continue
	rebi = rebase --interactive
	rebasei = rebase --interactive
	# Rename a branch locally and on remote
	rename-branch = "!f() { local old_branch=$(git rev-parse --abbrev-ref head); local new_branch=$1; git branch -m $new_branch; git push -u origin $new_branch; git push -d origin $old_branch; }; f"
	# Reverting
	reverta = revert --abort
	revertc = revert --continue
	revertn = revert --no-commit
	# Stage a file for removal without actually deleting it
	rmc = rm --cached
	# Remove local copies of remote branches that have been deleted
	rpo = remote prune origin
	# Do useful and mysterious things
	revl = rev-list
	revp = rev-parse
	# Copy to the clipboard the truncated form of the given commit SHA
	short = !git rev-parse --short $@ | xargs echo -n | pbcopy
	# Show the info and changes for the given/current commit, highlighting only
	# the changes within each line
	showcw = show --color-words
	# List the info and file paths for the given/current commit
	showno = show --name-only
	# List the info and file statuses for the given/current commit
	showns = show --name-status
	# Show the info and changes for the given/current commit, ignoring all
	# whitespace changes
	showw = show --ignore-all-space
	# Show the info and changes for the given/current commit, ignoring all
	# whitespace changes and coloring the within each line
	showwcw = show --ignore-all-space --color-words
	# Squash commits and apply to working directory without committing
	squash = merge --squash
	# Stash files in the current working directory, leaving staged files alone
	stashki = stash --keep-index
	# Apply its changes to the current working directory without removing it
	# from the stash
	stasha = stash apply
	# Unstash the last stash entry and apply its changes to the current working
	# directory
	stashp = stash pop
	# List all stashes
	stashl = stash list
	# Show details for a particular stash
	stashs = stash show
	# Show details (with contents) for a particular stash
	stashsp = stash show -p
	# Stash changes, including untracked files
	stashu = stash -u
	# Clone submodule repositories into their respective directories if empty
	suri = submodule update --recursive --init
	# Pull from remote for all existing submodules based on the superproject's
	# recorded SHA
	sur = submodule update --recursive
	# Pull from remote for all existing submodules; the --remote flag disregards
	# the superproject's recorded SHA and uses the latest from the
	# submodule's designated remote branch (master by default)
	surr = submodule update --recursive --remote
	# Verify commit by GPG signature
	vc = verify-commit
	vch = verify-commit HEAD
	# View all local branches that have not been merged into master
	view-merged-local-branches = "!f() { git branch --merged ${1:-main} | grep -Pv '(^\\*|main|master|develop)' | less -X; }; f"
	# View all remote branches that have not been merged into origin/master
	view-merged-remote-branches = "!f() { git branch --remote --merged origin/${1:-main} | sed 's|origin/||g' | grep -Pv '(main|master|develop)' | grep -Fv $(git rev-parse --abbrev-ref HEAD) | less -X; }; f"
	# Zip a WordPress plugin or theme
	zip-wordpress = !zip -r $1 * -x node_modules/ -x node_modules/**\\*

# Increase max size of buffer for pushes/pulls (e.g. for large repositories like
# raycast/extensions)
[http]
	postBuffer = 157286400

# Include user-specific git config specific to the current machine
[include]
	path = ~/user.inc.gitconfig
