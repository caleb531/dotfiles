# .gitconfig
# Caleb Evans

# User information
[user]
	name = Caleb Evans
	email = caleb@calebevans.me

# Store user credentials in macOS Keychain
[credential]
	helper = osxkeychain

# Core configuration
[core]
	# Use a global .gitignore for project-independent files
	excludesfile = ~/dotfiles/git/gitignore_global
	# Highlight line-specific changes and use diff-so-fancy to format diff
	pager = diff-so-fancy | less --tabs=4 -R

# Interactive staging
[interactive]
	# Use same diff highlighting for interactive staging
	diffFilter = diff-so-fancy

# Always sign commits using GPG
[commit]
	gpgsign = true

# Push/pull current branch by default (when no arguments are given)
[push]
	default = simple
[pull]
	default = simple

[diff]
	# Enable more-logical grouping of changes in diffs
	indentHeuristic = true
	# Consider a "word" a string of letters (camelcased or all lowercase) OR a
	# single non-space character
	wordRegex = [A-Z0-9]?[a-z0-9]+|[^[:space:]]

# Ignore linter-ui-default's panelHeight setting in Atom config
[filter "strip-panel-height"]
	clean = sed '/[[:<:]]panelHeight:/d'

[log]
	# Set a more human-readable default date format for git log
	date = format:%a %b %-d %Y @ %-I:%M %p
	# Disable log decoration (enabled by default in Git v2.13.0)
	decorate = no

# Set pleasant colors for diffs
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

# Disable "advice" help messages
[advice]
	# Advice shown when git refuses to merge or checkout due to local changes
	commitBeforeMerge = false
	# Advice shown when entering detached HEAD state
	detachedHead = false
	# Advice shown when push is rejected by remote
	pushUpdateRejected = false
	# Advice shown when running `git status`
	statusHints = false

# Useful Git aliases
[alias]
	# Stage interactively
	addp = add -p
	# Apply a commit to the working directory
	chp = cherry-pick
	# Modify the previous commit
	commita = commit --amend
	# Delete branches that have been merged in
	delete-merged-local-branches = !git branch --merged | grep -Pv '(^\\*|master|develop)' | xargs git branch -d
	delete-merged-remote-branches = !git branch --remote --merged | sed 's|origin/||g' | grep -Pv '(master|develop)' | grep -Fv $(git rev-parse --abbrev-ref HEAD) | xargs git push -d origin
	# Diff staged changes
	diffc = diff --cached
	# Diff files, highlighting only the changes within each line
	diffcw = diff --color-words
	diffcwc = diff --color-words --cached
	# Diff two files outside of a git repository
	diffni = diff --no-index
	diffnicw = diff --no-index --color-words
	diffniw = diff --no-index --ignore-all-space
	# List the paths of changed files
	diffno = diff --name-only
	diffnoc = diff --name-only --cached
	# List the statuses of changed files (added, modified, etc.)
	diffns = diff --name-status
	diffnsc = diff --name-status --cached
	# Show the diff of the current working directory since the last Git tag
	difflasttag = !git diff $(git lasttag)
	# Diff files, ignoring all whitespace changes
	diffw = diff --ignore-all-space
	diffwc = diff --ignore-all-space --cached
	diffwcw = diff --ignore-all-space --color-words
	diffwcwc = diff --ignore-all-space --color-words --cached
	# Run Git's garbage collection, removing all loose objects
	gcpn = gc --prune=now
	# Get the name of the last tag
	lasttag = describe --tags --abbrev=0
	# List commits with descriptions containing the given string
	logg = log --fixed-strings --regexp-ignore-case --grep
	# List commits with code changes containing the given string
	logs = log -S
	# Merge branches without fast-forwards, always ensuring a merge commit
	mergenff = merge --no-ff
	# Pull from remote, recommitting unpushed changes atop the pulled commits
	pullr = pull --rebase
	# Push any unpushed tags (this will *not* push unpushed commits)
	pusht = push --tags
	# Delete the remote branch with the current branch name
	pushd = !git push -d origin $(git rev-parse --abbrev-ref HEAD)
	# Push the current branch to a new remote branch of the same name
	pushu = !git push -u origin $(git rev-parse --abbrev-ref HEAD)
	# Stage a file for removal without actually deleting it
	rmc = rm --cached
	# Remove local copies of remote branches that have been deleted
	rpo = remote prune origin
	# Do useful and mysterious things
	rvp = rev-parse
	# Copy to the clipboard the truncated form of the given commit SHA
	short = !git rev-parse --short $@ | xargs echo -n | pbcopy
	# Show the info and changes for the given/current commit, highlighting only
	# the changes within each line
	showcw = show --color-words
	# List the info and file paths for the given/current commit
	showno = show --name-only
	# List the info and file statuses for the given/current commit
	showns = show --name-status
	# Stash files in the current working directory, leaving staged files alone
	stashki = stash --keep-index
	# Unstash the last stash entry and apply its changes to the current working
	# directory
	stashp = stash pop
	# Clone submodule repositories into their respective directories if empty
	suri = submodule update --recursive --init
	# Pull from remote for all existing submodules
	surr = submodule update --recursive --remote
